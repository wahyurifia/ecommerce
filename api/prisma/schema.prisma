// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @unique @default(uuid())
  name     String
  email    String   @unique
  password String
  isAdmin  Boolean  @default(false)
  orders   Order[]
  review   Review[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("user")
}

model Product {
  id          String   @id @unique @default(uuid())
  name        String
  image       String
  description String
  like        Int      @default(0)
  numReview   Int      @default(0)
  price       Int
  stock       Int
  reviews     Review[]

  isShow   Boolean  @default(true)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  order    Order[]  @relation("OrderProducts")

  @@map("product")
}

model Order {
  id            String @id @default(cuid())
  orderId       String @unique
  userId        String
  shipping      Json
  paymentMethod String @default("Paypal")
  paymentResult Json
  taxPrice      Int    @default(0)
  shippingPrice Int    @default(0)
  totalPrice    Int    @default(0)

  isPad    Boolean   @default(false)
  createAt DateTime  @default(now())
  product  Product[] @relation("OrderProducts")
  user     User      @relation(fields: [userId], references: [id])

  @@map("order")
}

model Review {
  id      String @id @unique @default(uuid())
  like    Int
  comment String

  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createAt  DateTime @default(now())

  @@map("review")
}
